import * as React from "react";
import { Frame, Size, PropertyControls, ControlType, Animatable } from "framer";
import { FrameProps } from "framer/types/src/render/presentation/Frame";
import { Color } from "framer/types/src/render";

//Made this as a practice on React components and Framer X -- Lahesh Kavinda | 2018
//dribbble.com/laheshk

enum Sizes {
  S,
  M,
  L,
  XL
}

const style: React.CSSProperties = {
  height: "100%",
  width: "100%",
  display: "block",
  textAlign: "left",
  overflow: "hidden"
};

interface Props {
  width: number;
  labelOne: string;
  labelTwo: string;
  background: string;
  height: number;
  search: string;
  size: string;
  color: string;
}

export class Cards extends React.Component<Props> {
  static defaultProps = {
    width: 300,
    height: 300,
    labelOne: "Card Title",
    labelTwo:
      "This is the descriptive text for the news card. You can change it in the property panel.",
    url: null,
    search: "",
    size: "M",
    background: "#F7F7F7",
    color: "#000000"
  };

  static propertyControls: PropertyControls<Props> = {
    search: { type: ControlType.String, title: "Keyword" },
    labelOne: { type: ControlType.String, title: "Title" },
    labelTwo: { type: ControlType.String, title: "Description" },
    background: { type: ControlType.Color, title: "Background" },
    color: { type: ControlType.Color, title: "Text Color" }
    //size: {
    //type: ControlType.Enum,
    //title: "Size",
    //options: ["S", "M", "L", "XL"]
    //}
  };

  state = {
    url: null
  };

  componentDidMount() {
    const { search, size } = this.props;
    this.setImage(this.props);
  }

  componentWillReceiveProps(props: Props) {
    if (props.search !== this.props.search) this.setImage(props);
    if (props.size !== this.props.size) this.setImage(props);
  }

  setImage({ size, search }: Props) {
    var currentSize = 400 + Sizes[size] * 100;
    const baseUrl = "https://source.unsplash.com";
    const route = search === "" ? "/random" : `/featured`;
    const url = `${baseUrl}${route}/${currentSize}x${currentSize}?${search}`;
    const xhr = new XMLHttpRequest();
    xhr.onreadystatechange = () => {
      if (xhr.readyState == XMLHttpRequest.HEADERS_RECEIVED) {
        this.setState({ url: xhr.responseURL });
      }
    };
    xhr.open("GET", url, true);
    xhr.send(null);
  }

  render() {
    const width = Animatable.getNumber(this.props.width);
    const height = Animatable.getNumber(this.props.height);

    return (
      <Frame
        style={style}
        width={this.props.width}
        height={this.props.height}
        background={this.props.background}
        color={this.props.color}
      >
        <div width={width} height={height} clip={true} background="white">
          <div
            style={{
              width: width,
              height: height * 0.5,
              backgroundImage: `url(${this.state.url})`,
              backgroundSize: '"cover"',
              backgroundPosition: "center",
              display: "flex",
              justifyContent: "center",
              alignItems: "center"
            }}
          />
        </div>
        <div style={title}>{this.props.labelOne}</div>
        <div style={para}>{this.props.labelTwo}</div>
      </Frame>
    );
  }
}
const title: React.CSSProperties = {
  marginTop: 20,
  marginLeft: 20,
  fontSize: 24,
  fontWeight: "bold"
};

const para: React.CSSProperties = {
  marginTop: 10,
  marginLeft: 20,
  marginRight: 20,
  fontSize: 14
};
