import * as React from "react"
import { PropertyControls, ControlType } from "framer"
import styled, { keyframes } from "styled-components"

type Props = {
    index?: string
    time: number
    playState: boolean
    curve: string
    showContentControl?: false
    count: number
    direction: string
    curveType: boolean
    cubic: string
    delay: number
    background?: boolean
}

const dash = keyframes`
  to {
    stroke-dashoffset: 0;
  }
`

const SVGWrapper = styled.div`
  display: flex;
  place-items: center;
  place-content: center;
  width: 100%;
  height: 100%;
  overflow: "hidden";
  path {
    stroke-dasharray: ${props => (props.playState ? props.array : 0)};
    stroke-dashoffset: ${props => (props.playState ? props.offset : 0)};

    animation-name: ${dash};
    animation-fill-mode: forwards;
    animation-timing-function: ${props =>
        props.curveType ? props.curve : `cubic-bezier${props.cubic}`};
    animation-play-state: ${props => (props.playState ? "running" : "paused")};
    animation-duration: ${props => props.time}s;
    animation-iteration-count: ${props => props.count};
    animation-direction: ${props => props.direction};
    animation-delay: ${props => props.delay}s;
  }
`

export class Animator extends React.Component<Props> {
    state = { offset: 0, hasNode: false }
    pathRef = React.createRef()

    updateState = () => {
        const node: any = this.pathRef.current

        if (node) {
            const parent = node.childNodes[0]
            const hasNodes = parent.childNodes.length > 0

            if (hasNodes) {
                const thisPath = node.childNodes[0].childNodes[0].childNodes[0]

                if (thisPath.tagName === "path") {
                    this.setState({
                        offset: thisPath.getTotalLength(),
                        hasNode: true,
                    })
                }
            }
        }
    }

    componentDidMount() {
        this.updateState()
    }

    componentDidUpdate(prevProps) {
        if (this.props.children !== prevProps.children) {
            this.updateState()
        }
    }

    render() {
        const {
            time,
            playState,
            curve,
            count,
            direction,
            cubic,
            curveType,
            delay,
            background,
        } = this.props

        let SVG = () => {
            return (
                <div style={style}>
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="50"
                        height="29"
                    >
                        <path
                            d="M 25 17 L 23 17 C 21.895 17 21 16.105 21 15 L 21 15 C 21 13.895 21.895 13 23 13 L 31 13 C 32.105 13 33 12.105 33 11 L 33 11 C 33 9.895 32.105 9 31 9 L 19 9 C 17.895 9 17 8.105 17 7 L 17 7 C 17 5.895 17.895 5 19 5 L 27 5 C 28.105 5 29 4.105 29 3 L 29 3 C 29 1.895 28.105 1 27 1 L 25 1"
                            fill="transparent"
                            strokeWidth="2"
                            stroke="#85f"
                            strokeLinecap="round"
                            strokeLinejoin="round"
                        />
                    </svg>
                    <p style={{ margin: 0, marginBottom: 5 }}>
                        Connect to Graphic
                    </p>
                    <p
                        style={{
                            margin: 0,
                            fontWeight: 500,
                            opacity: 0.5,
                            fontSize: 11,
                        }}
                    >
                        With SVG Path
                    </p>
                </div>
            )
        }

        if (React.Children.count(this.props.children) > 0) {
            SVG = () => {
                const children = React.cloneElement(this.props.children[0], {
                    id: "cloned",
                    position: "relative",
                    background: background
                        ? this.props.children[0].props.background
                        : "transparent",
                })
                return (
                    <SVGWrapper
                        children={children}
                        array={this.state.offset}
                        offset={this.state.offset}
                        time={time}
                        ref={this.pathRef}
                        playState={playState}
                        curve={curve}
                        count={count}
                        direction={direction}
                        cubic={cubic}
                        curveType={curveType}
                        delay={delay}
                    />
                )
            }
        }

        return <SVG />
    }

    static defaultProps: Props = {
        time: 2,
        playState: true,
        curve: "ease",
        count: 1,
        direction: "normal",
        curveType: true,
        cubic: "1, 0, 0, 1",
        delay: 0,
    }

    static propertyControls: PropertyControls<Props> = {
        playState: {
            type: ControlType.Boolean,
            title: "State",
            defaultValue: true,
            enabledTitle: "Play",
            disabledTitle: "Pause",
        },
        background: {
            title: "Fill",
            type: ControlType.Boolean,
            defaultValue: true,
            enabledTitle: "Inherit",
            disabledTitle: "Remove",
        },
        time: {
            type: ControlType.Number,
            title: "Time",
            min: 0,
            max: 20,
            displayStepper: true,
            step: 0.1,
        },
        delay: {
            type: ControlType.Number,
            title: "Delay",
            min: 0,
            max: 20,
            displayStepper: true,
        },
        count: {
            type: ControlType.Number,
            title: "Count",
            min: 1,
            max: 10,
            displayStepper: true,
        },
        direction: {
            title: "Direction",
            type: ControlType.Enum,
            defaultValue: "normal",
            options: ["normal", "reverse", "alternate", "alternate-reverse"],
            optionTitles: [
                "Normal",
                "Reverse",
                "Alternate",
                "Alternate Reverse",
            ],
        },
        curveType: {
            type: ControlType.Boolean,
            title: "Curve",
            defaultValue: true,
            enabledTitle: "Ease",
            disabledTitle: "Cubic",
        },
        curve: {
            title: "Type",
            type: ControlType.Enum,
            defaultValue: "ease",
            options: ["ease", "ease-in", "ease-out", "ease-in-out", "linear"],
            optionTitles: [
                "Ease",
                "Ease In",
                "Ease Out",
                "Ease In Out",
                "Linear",
            ],
            hidden(props) {
                return props.curveType === false
            },
        },
        cubic: {
            title: "Values",
            type: ControlType.String,
            defaultValue: "1, 0, 0, 1",
            placeholder: "0, 0, 1, 1",
            hidden(props) {
                return props.curveType === true
            },
        },
        children: {
            type: ControlType.ComponentInstance,
            title: "Content",
            hidden() {
                return true
            },
        },
    }
}

const style: React.CSSProperties = {
    height: "100%",
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
    textAlign: "center",
    color: "#8855FF",
    background: "rgba(136, 85, 255, 0.1)",
    overflow: "hidden",
    fontSize: 13,
    fontWeight: 600,
}
