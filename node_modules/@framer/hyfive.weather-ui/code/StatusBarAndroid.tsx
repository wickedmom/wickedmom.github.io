import * as React from "react";
import { PropertyControls, ControlType, Override, Data } from "framer";
import styled from 'styled-components';

// Declare types so props are defined for later
type Theme = 'dark' | 'light'
type Context = 'lockscreen' | 'launcher' | 'app'

interface Props {
  theme: Theme
  context: Context
  version: string
  width: number
  height: number
  systemcolor: string
  navigationcolor: string
  tintcolor: string
  carrier: string
  locale: string
}

interface State {
  time: string
  date: string
}

export class StatusBarAndroid extends React.Component<Props, State> {

  // Set default properties
  static defaultProps = {
    theme: "dark",
    width: 360,
    height: 24,
    version: "9",
    systemcolor: 'rgba(0,0,0,0.1)',
    navigationcolor: 'rgba(0,0,0,1)',
    tintcolor: 'rgba(26,113,113,.5)',
    context: "home",
    time: "10:00",
    date: "Thursday September 14",
    carrier: "Feather UI",
    locale: "en-US"
  }

  // Items shown in property panel
  static propertyControls: PropertyControls<Props> = {
    version: {
      type: ControlType.SegmentedEnum,
      options: ["8", "9"],
      optionTitles: ["8", "9"],
      title: "Style",
    },
    context: {
      type: ControlType.SegmentedEnum,
      options: ["lockscreen", "launcher", "app"],
      optionTitles: ["Lock", "Home", "App"],
      title: "Context",
    },
    theme: {
      type: ControlType.SegmentedEnum,
      options: ["dark", "light"],
      optionTitles: ["Dark", "Light"],
      title: "Background",
    },
    systemcolor: { type: ControlType.Color, title: "Status Color"},
    navigationcolor: { type: ControlType.Color, title: "Nav Color"},
    tintcolor: { type: ControlType.Color, title: "BG Tint"},
    carrier: { type: ControlType.String, title: "Carrier"},
    locale: { type: ControlType.String, title: "Locale"}

  }

  timer: number

  state = {
    time: "9:00",
    date: "Thursday September 13"
  }

  componentDidMount() {
    this.timer = window.setInterval(() => {
      this.updateTime()
    }, 1000)
  }

  componentWillUnmount() {
      window.clearInterval(this.timer)
  }

  updateTime = () => {
    let date = new Date(),
        locale = this.props.locale,
        dateOptions = { weekday: 'long', month: 'long', day: 'numeric' },
        timeOptions = { hour: '2-digit', minute: '2-digit', hour12: false },
        time = date.toLocaleString(locale, timeOptions),
        formattedDate = date.toLocaleDateString(locale, dateOptions);
    this.setState({
      time: time,
      date: formattedDate
     });
  }

  render() {
    return (
      <SystemBars
        context={this.props.context}
        tintcolor={this.props.tintcolor}
        theme={this.props.theme}>
        <StatusBar
          context={this.props.context}
          version={this.props.version}
          systemcolor={this.props.systemcolor}>
          <Time>{ this.props.context === "lockscreen" ? this.props.carrier : this.state.time }</Time>
          <StatusBarIcons
            theme={this.props.theme}>
            {systemPlaceholders}
          </StatusBarIcons>
        </StatusBar>
      </SystemBars>
    );
  }
}

// Reusable styles
const fastOutSlowIn = 'cubic-bezier(0.4, 0.0, 1, 1)',
      linearOutSlowIn = 'cubic-bezier(0.0, 0.0, 0.2, 1)',
      fastOutLinearIn = 'cubic-bezier(0.4, 0.0, 1, 1)';

// Styled components
const SystemBars = styled.div<Partial<Props>>`
  color: ${props => props.theme === 'dark' ? '#fff' : 'rgba(0,0,0,.87)' };
  background: ${props => props.context === 'lockscreen' ? props.tintcolor : 'transparent' };
  transition: .25s all ${fastOutSlowIn};
  height: 100%;
  width: 100%;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
`

const StatusBar = styled.div<Partial<Props>>`
  height: 24px;
  display: flex;
  justify-content: ${ props => props.version === "8" ? props.context === "lockscreen" ? "space-between" : "flex-start" : "space-between" };
  flex-direction: ${ props => props.version === "8" ? props.context === "lockscreen" ? "row" : "row-reverse" : "row" };
  align-items: center;
  padding: 0 16px;
  position: relative;
  overflow: hidden;
  &::before {
    content: '';
    position: absolute;
    width: 100%;
    height: 24px;
    z-index: 1;
    transition: .2s all ${linearOutSlowIn};
    background: ${ props => props.context === "app" ? props.systemcolor : "transparent" };
    top: ${ props => props.context === "app" ? '0' : '24px' };
  }
`

const Time = styled.div`
  font: 500 14px/1em 'Roboto';
  color: inherit;
  margin-right: 8px;
`

const StatusBarIcons = styled.div<Partial<Props>>`
  font: 16px/1em 'Material Icons';
  fill: ${props => props.theme === 'dark' ? '#fff' : '#000'};
  letter-spacing: -8px;
  display: flex;
  align-items: center;
  flex-grow: 0;
  flex-shrink: 0;
  margin-left: 8px;
`

// SVGs


const systemPlaceholders = (
  <svg viewBox="0 0 62 24" width="62px" height="24px">
    <g id="Group-6" transform="translate(8, 7)" fill="inherit">
      <rect x="18" y="0" width="10" height="10" rx="5"></rect>
      <polygon  transform="translate(40.000000, 5.000000) scale(1, -1) translate(-40.000000, -5.000000) " points="40 0 46 10 34 10"></polygon>
      <rect x="0" y="0" width="10" height="10"></rect>
    </g>
  </svg>
);