import * as React from "react";
import { PropertyControls, ControlType, Stack, Data } from "framer";
import NukaCarousel from 'nuka-carousel';
import Transitions from 'nuka-carousel/es/all-transitions';

const emptyStyle: React.CSSProperties = {
    height: "100%",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    textAlign: "center",
    color: "#8855FF",
    background: "rgba(136, 85, 255, 0.1)",
    overflow: "hidden",
    zIndex: -1
  };

interface Props {
    cellSpacing: number
    slideIndex: number
    removeHidden: boolean
    cellAlign: "left" | "center" | "right"
    wrapAround: boolean
    dragging: boolean
    slidesToShow: number
    slidesToScroll: number
    speed: number
    padding: number
    paddingPerSide: boolean
    paddingTop: number
    paddingRight: number
    paddingBottom: number
    paddingLeft: number
    onSlideIndexBeforeChange: (current: number, next: number) => void
    slideCount: number
    transitionMode: string
    autoplay: boolean
    autoplayInterval: number
    vertical: boolean
}

interface State {
    slideIndex: number,
    isAnimating: boolean
}

export class Carousel extends React.Component<Partial<Props>, State> {
    
    static defaultProps = {
        cellSpacing: 0,
        slideIndex: 0,
        removeHidden: true,
        cellAlign: "left",
        wrapAround: false,
        dragging: true,
        slidesToShow: 1,
        slidesToScroll: 1,
        speed: 200,
        padding: 0,
        paddingPerSide: false,
        paddingTop: 0,
        paddingRight: 0,
        paddingBottom: 0,
        paddingLeft: 0,
        slideCount: 0,
        transitionMode: "scroll",
        autoplay: false,
        autoplayInterval: 3000,
        vertical: false
    }
    static propertyControls: PropertyControls<Props> = {
        vertical: { type: ControlType.Boolean, disabledTitle: "Horizontal", enabledTitle: "Vertical", title: "Direction" },
        slideIndex: { type: ControlType.Number, min: 0, title: "Slide index" },
        slidesToShow: { type: ControlType.Number, min: 1, title: "Slide to show" },
        removeHidden: { type: ControlType.Boolean, disabledTitle: "Show", enabledTitle: "Hide", title: "Hidden slide" },
        cellAlign: {
            type: ControlType.SegmentedEnum,
            options: ["left", "center", "right"],
            optionTitles: ["Left", "Center", "Right"],
            title: "Alignment"
          },
        cellSpacing: { type: ControlType.Number, min: 0, title: "Gap" },
        padding: {
            type: ControlType.FusedNumber,
            toggleKey: "paddingPerSide",
            toggleTitles: ["Padding", "Padding per Side"],
            valueKeys: ["paddingTop", "paddingRight", "paddingBottom", "paddingLeft"],
            valueLabels: ["T", "R", "B", "L"],
            min: 0,
            title: "Padding"
        },
        wrapAround: { type: ControlType.Boolean, disabledTitle: "False", enabledTitle: "True", title: "Wrap" },
        dragging: { type: ControlType.Boolean, disabledTitle: "False", enabledTitle: "True", title: "Dragging" },
        // slidesToScroll: { type: ControlType.Number, min: 1, title: "Slide to scroll" },
        transitionMode: { type: ControlType.Enum, options: Object.keys(Transitions), optionTitles: Object.keys(Transitions), title: "Animation" },
        speed: { type: ControlType.Number, min: 1, max: 4000, title: "Duration" },
        autoplay: { type: ControlType.Boolean, disabledTitle: "False", enabledTitle: "True", title: "Autoplay" },
        autoplayInterval: { type: ControlType.Number, min: 1, max: 4000, title: "Duration" }
        
    }

    state = {
        slideIndex: Carousel.defaultProps.slideIndex,
        isAnimating: false
    }

    componentDidMount() {
        const { slideIndex } = this.props
        this.setState({ slideIndex })
    }

    componentWillReceiveProps(props: Props) {
        if (props.slideIndex !== this.props.slideIndex) {
            this.setState({ slideIndex: props.slideIndex })
        }
    }

    countSlides = () => {
        const childrenContent = this.props.children[0].props.children
        let counter = 0
        for (var child of childrenContent) {
            if (this.props.removeHidden && !child.props.visible)
                continue;
            counter++;
        }
        return counter
    }
    
    beforeSlide = (currentSlide, nextSlide) => {
        this.setState({isAnimating: true})
        const { onSlideIndexBeforeChange } = this.props
        if (onSlideIndexBeforeChange) {
            onSlideIndexBeforeChange(currentSlide, nextSlide)
        }
    }

    afterSlide = (slideIndex) => {
        this.setState({isAnimating: false})
        this.setState({ slideIndex })
    }

    render() {
        if (this.props.children.length <= 0) {
            const content = 'Connect to a Frame layer with children and adjust props in the property panel';
            return (<div style={emptyStyle}>{content}</div>)
        }
        if (this.props.children[0].props.children.length <= 0) {
            const content = 'Connect to a Frame layer with at least 1 child';
            return (<div style={emptyStyle}>{content}</div>)
        }
        const childrenContent = this.props.children[0].props.children
        const framePaddingLocal = this.props.paddingPerSide ? this.props.paddingTop+"px "+this.props.paddingRight+"px "+this.props.paddingBottom+"px "+this.props.paddingLeft+"px" : this.props.padding+"px"
        // let className = this.state.isAnimating ? 'animating' : '';
    return (
        <NukaCarousel 
            // className={className}
            renderTopCenterControls={()=>null}
            renderCenterLeftControls={()=>null}
            renderCenterRightControls={()=>null}
            renderBottomCenterControls={()=>null}
            framePadding={framePaddingLocal}
            transitionMode={this.props.transitionMode}
            slideIndex={this.state.slideIndex}
            afterSlide={this.afterSlide}
            beforeSlide={this.beforeSlide}
            heightMode="current"
            initialSlideHeight={childrenContent[0].props.height} 
            cellSpacing={this.props.cellSpacing} 
            slideWidth={childrenContent[0].props.width+"px"} 
            cellAlign={this.props.cellAlign} 
            wrapAround={this.props.wrapAround} 
            dragging={this.props.dragging} 
            slidesToShow={this.props.slidesToShow} 
            slidesToScroll={this.props.slidesToScroll} 
            autoplay={this.props.autoplay}
            autoplayInterval={this.props.autoplayInterval}
            speed={this.props.speed} 
            vertical={this.props.vertical} 
            style={{width: this.props.width, height: this.props.height}}>
            {childrenContent.map((child, i) => {
                if (this.props.removeHidden && !child.props.visible)
                    return undefined
                else
                    return React.cloneElement(child, {
                        left: 0,
                        top: 0
                    })
            }, this)}
        </NukaCarousel>
    )
    }
}